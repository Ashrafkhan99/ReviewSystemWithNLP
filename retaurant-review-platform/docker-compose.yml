version: '3.8'
services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: restaurant_reviews
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d restaurant_reviews"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  python-nlp:
    build: ./python-nlp-service
    container_name: python_nlp
    ports:
      - "5000:5000"
    networks:
      - app-network
    # Remove depends_on redis since NLP service doesn't need it
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 120s  # Allow 2 minutes for model loading

  spring-boot-api:
    build: ./spring-boot-api
    container_name: spring_api
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/restaurant_reviews
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin123
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - NLP_SERVICE_URL=http://python-nlp:5000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      python-nlp:
        condition: service_healthy  # Wait for NLP service to be ready
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge